// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @default(autoincrement()) @id
  email       String @unique
  username    String @unique
  password    String
  fullname    String?
  address     String?
  image       String?
  bio         String?
  hp          String?
  rememberToken     String?   @map("remember_token")
  status      Status @default(ACTIVE)
  role        Role @default(User)
  products    Products[]
  Favorite    Favorite[]
  Cart        Cart[]
  history     history[]
  review      review[]
  article     article[]
  Sales       Sales[]
  sellerTransactions Transaction[] @relation("SellerTransactions")
  buyerTransactions  Transaction[] @relation("BuyerTransactions")
  reports     TransactionReport[]
  
  @@map("users")
}

model Products {
  id          Int @default(autoincrement()) @id
  name        String
  price       Int
  stock       Int
  description String
  user        User? @relation(fields: [userId], references: [id])
  userId      Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  Favorite    Favorite[]
  Cart        Cart[]
  review      review[]
  productImages      ProductImages[]

  @@map("products")
}

model ProductImages {
  id            Int @default(autoincrement()) @id
  productsId    Int?
  products      Products? @relation(fields: [productsId], references: [id])
  image         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id       Int @default(autoincrement()) @id
  name     String @unique
  products Products[]

  @@map("categories")
}

model Favorite {
  id         Int @default(autoincrement()) @id
  user       User? @relation(fields: [userId], references: [id])
  userId     Int?
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int? 

  @@map("favorites")
}

model Cart {
  id         Int @default(autoincrement()) @id
  user       User? @relation(fields: [userId], references: [id])
  userId     Int?
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int? 
  history    history[]
  Sales Sales[]

  @@map("carts")
}

model history {
  id         Int @default(autoincrement()) @id
  user       User? @relation(fields: [userId], references: [id])
  userId     Int?
  carts      Cart? @relation(fields: [cartsId], references: [id])
  cartsId    Int?

  @@map("history")
}

model review {
  id          Int @default(autoincrement()) @id
  user        User? @relation(fields: [userId], references: [id])
  userId      Int?
  products    Products? @relation(fields: [productsId], references: [id])
  productsId  Int? 
  content     String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fileReview fileReview[]
  @@map("reviews")
}

model fileReview {
  id Int @default(autoincrement()) @id
  review      review? @relation(fields: [reviewId], references: [id])
  reviewId    Int? 
  image       String?
  video       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model article {
  id         Int @default(autoincrement())@id
  image      String?
  title      String
  subtitle   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User? @relation(fields: [userId], references: [id])
  userId     Int?

  @@map("articles")
}

model Sales {
  id          Int @default(autoincrement())@id
  user        User? @relation(fields: [userId], references: [id])
  userId      Int?
  cart        Cart? @relation(fields: [cartId], references: [id])
  cartId      Int? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sales")
}

model Transaction {
  id          Int @default(autoincrement()) @id
  createdAt   DateTime @default(now())
  status      String
  totalAmount Float
  sellerId    Int
  buyerId     Int
  seller      User     @relation("SellerTransactions", fields: [sellerId], references: [id])
  buyer       User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  items       Item[]
  reports     TransactionReport[]

  @@map("transactions")
}

model Item {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  quantity      Int
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model TransactionReport {
  id            Int         @default(autoincrement()) @id
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  reason        String
  description   String
  status        String      // 'pending', 'resolved', 'rejected'
  adminNotes    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Role {
  User
  Seller
  Admin
}

enum Status {
  ACTIVE
  INACTIVE
}